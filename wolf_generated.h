// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WOLF_H_
#define FLATBUFFERS_GENERATED_WOLF_H_

#include "flatbuffers/flatbuffers.h"

struct WolfEvent;

struct WolfEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_KEY = 8,
    VT_VALUE = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct WolfEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(WolfEvent::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(WolfEvent::VT_NAME, name);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(WolfEvent::VT_KEY, key);
  }
  void add_value(float value) {
    fbb_.AddElement<float>(WolfEvent::VT_VALUE, value, 0.0f);
  }
  explicit WolfEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WolfEventBuilder &operator=(const WolfEventBuilder &);
  flatbuffers::Offset<WolfEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WolfEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<WolfEvent> CreateWolfEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    float value = 0.0f) {
  WolfEventBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<WolfEvent> CreateWolfEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    const char *key = nullptr,
    float value = 0.0f) {
  return CreateWolfEvent(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0,
      key ? _fbb.CreateString(key) : 0,
      value);
}

inline const WolfEvent *GetWolfEvent(const void *buf) {
  return flatbuffers::GetRoot<WolfEvent>(buf);
}

inline bool VerifyWolfEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WolfEvent>(nullptr);
}

inline void FinishWolfEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WolfEvent> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_WOLF_H_
