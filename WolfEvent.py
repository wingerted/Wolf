# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class WolfEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWolfEvent(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WolfEvent()
        x.Init(buf, n + offset)
        return x

    # WolfEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WolfEvent
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WolfEvent
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # WolfEvent
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # WolfEvent
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def WolfEventStart(builder): builder.StartObject(4)
def WolfEventAddId(builder, id): builder.PrependInt32Slot(0, id, 0)
def WolfEventAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def WolfEventAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def WolfEventAddValue(builder, value): builder.PrependFloat32Slot(3, value, 0.0)
def WolfEventEnd(builder): return builder.EndObject()
